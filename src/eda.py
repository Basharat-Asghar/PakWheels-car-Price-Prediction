# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v7xCBEHQLMXAjjOKEIfcVYkryNZV4kx8

### Importing Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

"""### Loading Data"""

df = pd.read_csv('https://raw.githubusercontent.com/Basharat-Asghar/PakWheels-car-Price-Prediction/refs/heads/main/data/pakwheels_cleaned_data.csv')

"""### Basic  Data Inspection"""

df.head()

df.shape

df.info()

df.describe()

df.columns

df.isnull().sum()

round((df.isnull().sum() / len(df)) * 100, 2)

df1 = df.copy()

df1.drop('drive_type', axis=1, inplace=True)

df1 = df1.dropna(subset=['price_pkr_lacs', 'engine_numeric', 'model'])
print(df1.isna().sum())

df1.shape

df1.duplicated().sum()

df1.drop_duplicates(keep='first', inplace=True)

df1.shape

df1.duplicated().sum()

"""### UniVariate EDA"""

num_cols = df1.select_dtypes(exclude='object').columns
num_cols

cat_cols = df1.select_dtypes(include='object').columns
cat_cols = cat_cols[1:]
cat_cols

def num_uni_eda(df,col):
  sns.histplot(data=df, x=col)
  plt.title(f"Distribution of {col}")
  plt.show()

  sns.boxplot(data=df, x=col)
  plt.title(col)
  plt.show()

for col in num_cols:
  num_uni_eda(df1,col)

"""Dropping total 48 entries which are before 1970, as they do not add much value."""

df1 = df1[df1['year'] >= 1980]

sns.histplot(data=df1, x='year')
plt.title("Distribution of Year")
plt.show()

sns.boxplot(data=df1, x='year')
plt.title("Year")
plt.show()

"""Defining minimum and maximum bounds for the Mileage to get realistic mileage."""

def clean_mileage(df,year_col='year',mileage_col='mileage_km'):
  current_year = datetime.now().year

  def min_mileage(year):
    car_age = current_year - year
    return min(car_age * 1000, 5000)

  def max_mileage(year):
    car_age = current_year - year
    return min((car_age + 1) * 25000, 500000)

  df['min_mileage_allowed'] = df[year_col].apply(min_mileage)
  df['max_mileage_allowed'] = df[year_col].apply(max_mileage)

  df[mileage_col] = df[[mileage_col, 'min_mileage_allowed']].max(axis=1)
  df[mileage_col] = df[[mileage_col, 'max_mileage_allowed']].min(axis=1)

  df.drop(columns=['min_mileage_allowed', 'max_mileage_allowed'], inplace=True)

  return df

df2 = clean_mileage(df1, year_col='year', mileage_col='mileage_km')

sns.histplot(data=df2, x='mileage_km')
plt.title("Distribution of Mileage")
plt.show()

sns.boxplot(data=df2, x='mileage_km')
plt.title("Mileage in KM")
plt.show()

df2.shape

def cat_countplt(df,col):
  sns.countplot(data=df, y=col)
  plt.title(f"# of Cars per {col} Category")
  plt.show()

for col in cat_cols:
  cat_countplt(df2,col)

for col in cat_cols:
  print(df2[col].value_counts())

df2['fuel'] = df2['fuel'].replace(['CNG', 'LPG', 'Electric'], 'Other')
df2['fuel'].value_counts()

df2['engine_cc'] = df2.apply(lambda x: x['engine_numeric'] if x['engine_type']=='ICE' else None, axis=1)
df2['battery_kwh'] = df2.apply(lambda x: x['engine_numeric'] if x['engine_type']=='EV' else None, axis=1)

df2.drop(columns=['engine_numeric'], axis=1, inplace=True)
df2.head()

df2['engine_cc'] = df2['engine_cc'].fillna(0)
df2['battery_kwh'] = df2['battery_kwh'].fillna(0)

df2['company'].nunique()

df3 = df2.copy()

company_count = df3['company'].value_counts()
df3['company'] = df3['company'].apply(lambda x: x if company_count[x] >= 40 else 'Other')

df3['company'].nunique()

df3['model'].nunique()

model_counts = df3['model'].value_counts()

# Quick look at top 20 models
print(model_counts.head(20))

# How many unique models
print("Unique models:", df3['model'].nunique())

cum_percentage = model_counts.cumsum() / model_counts.sum() * 100
print(cum_percentage.head(145))  # first 30 to inspect

# Find cutoff
coverage = 95  # target percentage
cutoff = model_counts[model_counts.cumsum() <= (coverage/100)*len(df3)].min()

print(f"Suggested threshold: {cutoff} listings")

df3['model'] = df3['model'].apply(
    lambda x: x if model_counts[x] >= cutoff else 'Other'
)

df3['model'].nunique()

df3.head()

"""### Bivariate Analysis
Price vs Year (lineplot)
"""

sns.lineplot(data=df3, x='year', y='price_pkr_lacs')
plt.title("Year vs Price")
plt.show()

df3.shape

"""Price vs Mileage"""

sns.scatterplot(data=df3, y='price_pkr_lacs', x='mileage_km')
plt.title("Price vs Mileage")
plt.show()

"""higher mileage â†’ lower price (cars with more kilometers driven depreciate).

Price vs Engine size
"""

sns.scatterplot(data=df3, y='price_pkr_lacs', x='engine_cc')
plt.title("Price vs Engine")
plt.show()

"""engine values which shows 0 are missing values.

Price vs Transmission/Fuel/Company (boxplots/violin plots).
"""

sns.boxplot(data=df3, x='price_pkr_lacs', y='transmission')
plt.title("Price vs Transmission")
plt.show()

"""Correlation heatmap (numerical features only)."""

num_col = df3.select_dtypes(exclude='object').columns
num_col

sns.heatmap(df3[num_col].corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap of Numeric Features")
plt.show()

""" Price variation across brands."""

price_company = df3.groupby('company')['price_pkr_lacs'].agg(['count', 'mean', 'median']).sort_values('mean', ascending=False)
price_company.head(10)

"""premium brands cost more as compared to normal brands.

Price variation across models.
"""

price_model = df3.groupby('model')['price_pkr_lacs'].agg(['count', 'mean', 'median']).sort_values('mean', ascending=False)
price_model.head(10)

"""Creating new feature car age."""

current_year = datetime.now().year
df3['car_age'] = current_year - df3['year']
df3.head()

from scipy import stats
df3['boxcox_mileage'], lam = stats.boxcox(df3['mileage_km'] + 1)
print("Lambda used:", lam)

sns.histplot(df3, x='boxcox_mileage', kde=True)

df3.drop('title', axis=1, inplace=True)
df3.head()

df3.to_csv('cleaned_df.csv', index=False)