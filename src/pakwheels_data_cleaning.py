# -*- coding: utf-8 -*-
"""PakWheels Data Cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IWAUCChWUc75ptDzLCM3SxluxKwByO91

### Importing Libraries
"""

import pandas as pd
import numpy as np
import re

"""### Loading Data"""

df = pd.read_csv("https://raw.githubusercontent.com/Basharat-Asghar/PakWheels-car-Price-Prediction/refs/heads/main/data/pakwheels_cars_raw.csv")

df.head()

"""### Data Cleaning"""

df.columns

"""Converting column names to lower case."""

df.columns = df.columns.str.lower()

df.columns

"""Extracting price from string."""

def extract_convert_price(value):
  value = value.lower().replace("pkr", "").strip()
  if "crore" in value:
    num = float(value.replace("crore", "").strip())
    return num * 100
  elif "lac" in value or "lacs" in value:
    num = float(value.replace("lacs", "").replace("lac", "").strip())
    return num

  return None

df["price_pkr_lacs"] = pd.to_numeric(df['price'].apply(extract_convert_price))
df.head()

"""Extracting kms_driven from mileage column."""

def extract_mileage(value):
  value = value.lower().replace("km", "").replace(",", "").strip()
  return value

df["mileage_km"] = pd.to_numeric(df['mileage'].apply(extract_mileage))
df.head()

"""Cleaning engine column to extract numeric value of engine and engine type."""

def extract_engine(row):
  fuel = str(row['fuel']).lower().strip()
  engine_val = str(row['engine']).lower().strip()
  if fuel == 'electric':
    num = re.findall(r"\d+\.?\d*", engine_val)
    return (float(num[0]) if num else None, "EV")
  else:
    num = re.findall(r"\d+\.?\d*", engine_val)
    return (float(num[0]) if num else None, "ICE")

df[["engine_numeric", "engine_type"]] = df.apply(extract_engine, axis=1, result_type="expand")
df.head()

"""Extract company name from title column."""

car_companies = [
    "Mercedes Benz", "Land Rover", "Range Rover",
    "Porsche", "Proton", "FAW", "Honda", "Suzuki", "Toyota", "Changan",
    "KIA", "Nissan", "Lexus", "Daihatsu", "Isuzu", "Mitsubishi",
    "BMW", "Audi", "Hyundai", "Jeep", "Subaru", "Ford", "Chevrolet"
]

pattern = r"\b(" + "|".join(sorted(car_companies, key=lambda x: -len(x))) + r")\b"
df["company"] = df["title"].str.extract(pattern, flags=re.IGNORECASE)
df["company"] = df["company"].fillna(df["title"].str.split().str[0])
df["company"] = df["company"].str.title()
df.head()

"""Extracting model from title."""

stop_patterns = [
    r"^\d{4}$",        # year
    r"hybrid",         # fuel/variant
    r"automatic", r"manual", r"cv[tp]?", r"ags", r"prosmatec", r"tiptronic",
    r"auto gear shift", r"cruisetronic", r"awd", r"fwd", r"rwd", r"4wd"
]
stop_regex = re.compile("|".join(stop_patterns), re.IGNORECASE)

def extract_model(title, company):
  if not isinstance(title, str) or not company:
      return None

  remaining = re.sub(company, "", title, flags=re.IGNORECASE).strip()
  words = re.findall(r"[A-Za-z0-9\-]+", remaining)

  model_words = []
  for w in words:
    if stop_regex.match(w):
      break
    model_words.append(w)

  return " ".join(model_words) if model_words else None

df["model"] = df.apply(lambda x: extract_model(x["title"], x["company"]), axis=1)
df.head()

"""Drive type extraction."""

df["drive_type"] = df["title"].str.extract(r"\b(AWD|4WD|FWD|RWD)\b", flags=re.IGNORECASE)
df.head()

"""Removing extreme price values based on model, 4 * median price."""

price_median_per_model = df.groupby('model')['price_pkr_lacs'].transform('median')
df['price_pkr_lacs'] = df['price_pkr_lacs'].where(df['price_pkr_lacs'] <= 4 * price_median_per_model, price_median_per_model)

df1 = df.copy()

"""Cleaning engine_numeric column to get rid of unrealistic values with the median of per model type."""

ice_mask = df1['engine_type'] == 'ICE'
unrealistic_ice = (df1['engine_numeric'] < 600) | \
                  (df1['engine_numeric'] > 8000) | \
                  (df1['engine_numeric'] == 0)
df1.loc[ice_mask & unrealistic_ice, 'engine_numeric'] = np.nan

ev_mask = df1['engine_type'].isin(['EV'])
unrealistic_ev = (df1['engine_numeric'] < 20) | \
                  (df1['engine_numeric'] > 200) | \
                  (df1['engine_numeric'] == 0)
df1.loc[ev_mask & unrealistic_ev, 'engine_numeric'] = np.nan

median_per_model_type = df1.groupby(['model', 'engine_type'])['engine_numeric'].transform('median')
df1['engine_numeric'] = df1['engine_numeric'].fillna(median_per_model_type)

"""Dropping columns."""

df1.drop(columns=['price', 'mileage', 'engine'], inplace=True)
df1.head()

df1.to_csv("pakwheels_cleaned_data.csv", index=False)